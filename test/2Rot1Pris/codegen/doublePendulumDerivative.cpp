//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// doublePendulumDerivative.cpp
//
// Code generation for function 'doublePendulumDerivative'
//

// Include files
#include "doublePendulumDerivative.h"
#include "rt_nonfinite.h"
#include <cmath>
#include <cstring>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void doublePendulumDerivative(double dot_theta1, double dot_theta2,
                              double dot_theta3, double theta2, double theta3,
                              double d_xddot[36])
{
  double b_t239_tmp;
  double b_t240_tmp;
  double b_t241_tmp;
  double b_t28_tmp;
  double c_t239_tmp;
  double c_t240_tmp;
  double d_t239_tmp;
  double d_t240_tmp;
  double e_t239_tmp;
  double e_t240_tmp;
  double f_t239_tmp;
  double t10;
  double t100;
  double t104;
  double t106;
  double t107;
  double t107_tmp;
  double t108;
  double t11;
  double t110;
  double t111;
  double t113;
  double t113_tmp;
  double t114;
  double t120;
  double t125;
  double t126;
  double t127;
  double t127_tmp;
  double t136;
  double t137;
  double t138;
  double t139;
  double t14;
  double t140;
  double t147;
  double t148;
  double t149;
  double t149_tmp;
  double t15;
  double t150;
  double t152;
  double t154;
  double t164;
  double t165;
  double t171;
  double t171_tmp;
  double t172;
  double t18;
  double t180;
  double t181;
  double t189;
  double t18_tmp;
  double t191;
  double t192;
  double t193;
  double t194;
  double t196;
  double t198;
  double t199;
  double t2;
  double t200;
  double t201;
  double t202;
  double t203;
  double t204;
  double t213;
  double t213_tmp;
  double t21_tmp;
  double t22;
  double t220;
  double t221;
  double t23;
  double t237;
  double t238;
  double t239;
  double t239_tmp;
  double t24;
  double t240_tmp;
  double t241;
  double t241_tmp;
  double t24_tmp;
  double t25;
  double t25_tmp;
  double t28_tmp;
  double t29;
  double t3;
  double t30;
  double t31;
  double t34;
  double t34_tmp;
  double t36;
  double t38;
  double t38_tmp;
  double t39;
  double t4;
  double t44;
  double t44_tmp;
  double t45;
  double t46;
  double t47;
  double t49;
  double t5;
  double t54;
  double t55;
  double t55_tmp;
  double t56;
  double t56_tmp;
  double t57;
  double t57_tmp;
  double t59;
  double t6;
  double t60;
  double t60_tmp;
  double t61;
  double t61_tmp;
  double t62;
  double t67;
  double t67_tmp;
  double t68;
  double t69;
  double t7;
  double t70;
  double t70_tmp;
  double t73_tmp;
  double t75;
  double t76;
  double t8;
  double t82;
  double t83;
  double t83_tmp;
  double t84;
  double t85;
  double t86;
  double t87;
  double t87_tmp;
  double t88;
  double t88_tmp;
  double t89_tmp;
  double t9;
  double t90;
  double t90_tmp;
  double t95;
  double t95_tmp;
  double t95_tmp_tmp;
  double t96;
  double t96_tmp;
  double t97;
  double t97_tmp;
  double t98;
  double t99;
  double t99_tmp;
  // doublePendulumDerivative
  //     D_XDDOT =
  //     doublePendulumDerivative(DOT_THETA1,DOT_THETA2,DOT_THETA3,THETA2,THETA3)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     22-Nov-2022 13:59:36
  t2 = std::cos(theta3);
  t3 = std::sin(theta3);
  t4 = dot_theta1 * dot_theta1;
  t5 = dot_theta3 * dot_theta3;
  t6 = theta2 * theta2;
  t7 = rt_powd_snf(theta2, 3.0);
  t14 = dot_theta1 * 112.0;
  t15 = dot_theta2 * 112.0;
  t18_tmp = dot_theta1 * dot_theta2;
  t18 = t18_tmp * 64.0;
  t21_tmp = dot_theta1 * theta2;
  t22 = dot_theta2 * theta2 * 64.0;
  t8 = t2 * t2;
  t9 = rt_powd_snf(t2, 3.0);
  t10 = t3 * t3;
  t11 = rt_powd_snf(t3, 3.0);
  t24_tmp = dot_theta1 * t3;
  t24 = t24_tmp * 32.0;
  t25_tmp = dot_theta3 * t3;
  t25 = t25_tmp * 32.0;
  t28_tmp = dot_theta1 * dot_theta3;
  b_t28_tmp = t28_tmp * t2;
  t34_tmp = t28_tmp * t3;
  t34 = t34_tmp * 16.0;
  t38_tmp = t24_tmp * theta2;
  t38 = t38_tmp * 16.0;
  t39 = t25_tmp * theta2 * 16.0;
  t44_tmp = dot_theta1 * t2;
  t108 = t44_tmp * t3;
  t44 = t108 * 4.0;
  t46 = t44_tmp * 64.0;
  t241 = dot_theta3 * t2;
  t47 = t241 * 64.0;
  t55_tmp = t3 * t5;
  t55 = t55_tmp * 8.0;
  t59 = t55_tmp * 16.0;
  t60_tmp = t3 * t4;
  t60 = t60_tmp * 32.0;
  t61_tmp = t44_tmp * theta2;
  t61 = t61_tmp * -56.0;
  t62 = t241 * theta2 * -56.0;
  t73_tmp = b_t28_tmp * theta2;
  t83_tmp = t108 * theta2;
  t83 = t83_tmp * 2.0;
  t84 = t241 * t3 * theta2 * 4.0;
  t89_tmp = t2 * t5;
  t90_tmp = t2 * t4;
  t90 = t90_tmp * 32.0;
  t95_tmp_tmp = t2 * t3;
  t95_tmp = t95_tmp_tmp * t4;
  t95 = t95_tmp * theta2;
  t113_tmp = t89_tmp * theta2;
  t113 = t113_tmp * 8.0;
  t127_tmp = t60_tmp * theta2;
  t127 = t127_tmp * 8.0;
  t138 = t95_tmp * 2.0;
  t164 = t44_tmp * t6 * -16.0;
  t165 = t241 * t6 * -16.0;
  t23 = t10 * 7.0;
  t29 = t8 * theta2 * 4.0;
  t108 = dot_theta1 * t11;
  t30 = t108 * 4.0;
  t193 = dot_theta3 * t11;
  t31 = t193 * 4.0;
  t36 = t10 * theta2 * 4.0;
  t45 = t8 * 8.0;
  t49 = t10 * 8.0;
  t56_tmp = dot_theta1 * t10;
  t56 = t56_tmp * 14.0;
  t57_tmp = dot_theta2 * t10;
  t57 = t57_tmp * 14.0;
  t67_tmp = t28_tmp * t9;
  t67 = t67_tmp * 4.0;
  t68 = t4 * t11;
  t69 = t5 * t11;
  t70_tmp = t28_tmp * t11;
  t70 = t70_tmp * 2.0;
  t75 = t108 * theta2 * 2.0;
  t76 = t193 * theta2 * 2.0;
  t82 = dot_theta2 * t44;
  t85 = dot_theta1 * t9 * 8.0;
  t86 = dot_theta3 * t9 * 8.0;
  t87_tmp = dot_theta1 * t8;
  t87 = t87_tmp * 16.0;
  t88_tmp = dot_theta2 * t8;
  t88 = t88_tmp * 16.0;
  t96_tmp = t4 * t8;
  t96 = t96_tmp * 2.0;
  t97_tmp = t4 * t9;
  t97 = t97_tmp * 2.0;
  t98 = t97_tmp * 4.0;
  t99_tmp = t5 * t9;
  t99 = t99_tmp * 2.0;
  t100 = t99_tmp * 4.0;
  t106 = t6 * t8 * 2.0;
  t107_tmp = t4 * t10;
  t107 = t107_tmp * 2.0;
  t125 = t6 * t10 * 2.0;
  t108 = t24_tmp * t8;
  t139 = t108 * 4.0;
  t11 = t25_tmp * t8;
  t140 = t11 * 4.0;
  t147 = t60_tmp * t8;
  t148 = t55_tmp * t8;
  t149_tmp = t34_tmp * t8;
  t149 = t149_tmp * 2.0;
  t193 = b_t28_tmp * t10;
  t150 = t193 * 4.0;
  t152 = t108 * theta2 * 2.0;
  t154 = t11 * theta2 * 2.0;
  t171_tmp = dot_theta1 * t6;
  t171 = t171_tmp * t9 * 2.0;
  t172 = dot_theta3 * t6 * t9 * 2.0;
  t108 = t90_tmp * t10;
  t191 = t108 * 4.0;
  t11 = t89_tmp * t10;
  t192 = t11 * 2.0;
  t194 = t11 * 4.0;
  t200 = t108 * theta2;
  t202 = t11 * theta2;
  t204 = t193 * theta2 * 2.0;
  t213_tmp = t107_tmp * theta2;
  t213 = t213_tmp * 44.0;
  t54 = t45 * theta2;
  t104 = dot_theta3 * t85;
  t108 = t68 * 2.0;
  t11 = t69 * 2.0;
  t111 = t85 * theta2;
  t114 = t86 * theta2;
  t120 = t18_tmp * t49;
  t126 = dot_theta1 * t49 * theta2;
  t136 = t68 * theta2;
  t137 = t69 * theta2;
  t180 = t44_tmp * t49;
  t181 = t241 * t49;
  t189 = t2 * t107;
  t193 = t148 * 2.0;
  t201 = t147 * theta2;
  t203 = t148 * theta2;
  t220 = t44_tmp * t125;
  t221 = t241 * t125;
  t110 = dot_theta1 * t54;
  t196 = dot_theta3 * t180;
  t198 = t2 * t126;
  t199 = t181 * theta2;
  t239_tmp = t18_tmp * t8;
  b_t239_tmp = t18_tmp * t10;
  c_t239_tmp = t55_tmp * theta2;
  d_t239_tmp = t34_tmp * theta2;
  e_t239_tmp = t239_tmp * theta2;
  f_t239_tmp = b_t239_tmp * theta2;
  t239 = ((((((((((((((((((((((((dot_theta2 * t14 + t18 * theta2) +
                                t34_tmp * -32.0) +
                               dot_theta3 * t30) -
                              t60_tmp * 16.0) -
                             t59) +
                            t108) +
                           t11) +
                          d_t239_tmp * -16.0) +
                         t136) +
                        t137) +
                       t70 * theta2) +
                      dot_theta3 * t139) +
                     t239_tmp * -16.0) +
                    b_t239_tmp * -14.0) -
                   t127) +
                  c_t239_tmp * -8.0) -
                 t138) +
                t3 * t96) +
               t193) -
              t95) +
             t201) +
            t203) +
           t149 * theta2) +
          e_t239_tmp * -8.0) +
         f_t239_tmp * -8.0;
  t237 = 1.0 /
         ((((((((-(theta2 * 56.0) + t23 * theta2) - t6 * 16.0) + t45) + t49) +
             t54) +
            t106) +
           t125) -
          64.0);
  t238 = t237 * t237;
  t240_tmp = t18_tmp * t2;
  b_t240_tmp = dot_theta3 * t44;
  c_t240_tmp = t95_tmp_tmp * t5;
  d_t240_tmp = t60_tmp * t6;
  e_t240_tmp = t70_tmp * theta2;
  t95 = (((((((((((((((((((((((((((((t240_tmp * 16.0 + dot_theta3 * t24) +
                                    t18_tmp * -112.0) +
                                   t59) +
                                  t60) +
                                 t34 * theta2) +
                                t18_tmp * theta2 * -64.0) +
                               b_t240_tmp * theta2) +
                              dot_theta2 * t87) +
                             t70_tmp * -4.0) +
                            dot_theta2 * t56) -
                           t240_tmp * theta2 * 8.0) +
                          t55 * theta2) +
                         t127_tmp * 22.0) +
                        t138) +
                       t95 * 3.0) +
                      c_t240_tmp * theta2 * 2.0) -
                     t108) -
                    t11) +
                   dot_theta2 * t110) +
                  d_t240_tmp * 4.0) +
                 e_t240_tmp * -2.0) +
                t120 * theta2) +
               t149_tmp * -4.0) -
              t136) -
             t137) +
            t147 * -2.0) -
           t193) +
          t149_tmp * theta2 * -2.0) -
         t201) -
        t203;
  t108 = t4 * t6;
  t11 = t4 * t7;
  t59 = t90_tmp * t6;
  t241 = t89_tmp * t6;
  t193 = t4 * theta2;
  t201 = t108 * t8;
  t203 = t108 * t10;
  t241_tmp = t90_tmp * theta2;
  b_t241_tmp = t96_tmp * theta2;
  t149_tmp = t240_tmp * t3;
  t241 = (((((((((((((((((((((((((((((((((((((((-(t4 * 224.0) + t82) +
                                               b_t28_tmp * -64.0) +
                                              t98) +
                                             t100) +
                                            t104) +
                                           dot_theta3 * t61) -
                                          t193 * 324.0) -
                                         t90) -
                                        t89_tmp * 32.0) +
                                       t96_tmp * 28.0) +
                                      t149_tmp * theta2 * -2.0) +
                                     t107_tmp * 32.0) -
                                    t241_tmp * 28.0) -
                                   t113_tmp * 28.0) +
                                  t98 * theta2) +
                                 t100 * theta2) +
                                t104 * theta2) -
                               t11 * 32.0) +
                              t108 * t9) +
                             t5 * t6 * t9) +
                            dot_theta3 * t171) +
                           t191) +
                          t194) +
                         t196) +
                        b_t241_tmp * 44.0) +
                       dot_theta3 * t164) +
                      t213) -
                     t108 * 168.0) +
                    t11 * t8 * 4.0) +
                   t11 * t10 * 4.0) +
                  t90_tmp * t36) +
                 t89_tmp * t36) +
                dot_theta3 * t198) -
               t59 * 8.0) -
              t241 * 8.0) +
             t59 * t10) +
            t241 * t10) +
           dot_theta3 * t220) +
          t201 * 23.0) +
         t203 * 22.0;
  std::memset(&d_xddot[0], 0, 9U * sizeof(double));
  t125 = (((((-(theta2 * 32.0) + t23) + t29) + t36) + t45) - 56.0) * t238;
  d_xddot[9] =
      t237 *
          ((((((((((((t18 - t34) - t55) + t68) + t69) + t70) + t147) + t148) +
               t149) -
              t60_tmp * 8.0) -
             t239_tmp * 8.0) -
            b_t239_tmp * 8.0) -
           t95_tmp) /
          2.0 -
      t125 * t239 / 2.0;
  d_xddot[10] =
      t237 *
          (((((((((((((((((((((((((((t4 * -324.0 + t98) + t100) + t104) +
                                  t191) +
                                 t194) +
                                t196) +
                               t213) -
                              t90_tmp * 28.0) -
                             t89_tmp * 28.0) -
                            t108 * 96.0) +
                           t96_tmp * 44.0) +
                          t107_tmp * 44.0) -
                         t193 * 336.0) +
                        t67 * theta2) +
                       t97 * theta2) +
                      t99 * theta2) +
                     t189 * theta2) +
                    t192 * theta2) -
                   b_t28_tmp * 56.0) +
                  t201 * 12.0) +
                 t203 * 12.0) -
                t241_tmp * 16.0) -
               t113_tmp * 16.0) +
              b_t241_tmp * 46.0) -
             t149_tmp * 2.0) +
            b_t28_tmp * t36) -
           t73_tmp * 32.0) /
          2.0 -
      t125 * t241 / 2.0;
  d_xddot[11] = t237 *
                    ((((((((((((((((-t18 + t34) + t55) - t68) - t69) - t70) +
                               t18_tmp * t45) +
                              t120) +
                             t127) -
                            t147) -
                           t148) -
                          t149) +
                         b_t240_tmp) +
                        t60_tmp * 22.0) -
                       t240_tmp * 8.0) +
                      t95_tmp * 3.0) +
                     c_t240_tmp * 2.0) /
                    2.0 -
                t125 * t95 / 2.0;
  d_xddot[12] = 0.0;
  d_xddot[13] = 0.0;
  d_xddot[14] = 0.0;
  t125 = t95_tmp_tmp * t238;
  t11 = (((((((((-(b_t28_tmp * 32.0) + t67) + t82) + t97) + t99) + t107) -
            t73_tmp * 16.0) +
           t97_tmp * theta2) +
          t99_tmp * theta2) +
         t67_tmp * theta2 * 2.0) -
        t89_tmp * 16.0;
  d_xddot[15] =
      t237 *
          ((((((((((((t11 + t150) - t96) - t113) + t189) + t192) + t200) +
                t202) +
               t204) -
              t90_tmp * 16.0) -
             t241_tmp * 8.0) -
            b_t241_tmp) +
           t213_tmp) /
          2.0 +
      t125 * t239 * theta2;
  d_xddot[16] =
      t237 *
          ((((((((((((((((((((((((((((((((-t60 + t68 * 4.0) + t69 * 4.0) +
                                        t136 * 4.0) +
                                       t137 * 4.0) +
                                      t147 * 4.0) +
                                     t148 * 4.0) -
                                    t55_tmp * 32.0) +
                                   t6 * t68) +
                                  t6 * t69) +
                                 t6 * t70) +
                                t6 * t138) +
                               t6 * t147) +
                              t6 * t148) -
                             t34_tmp * 64.0) -
                            t239_tmp * 4.0) +
                           b_t239_tmp * 4.0) +
                          t70_tmp * 8.0) +
                         t25_tmp * t110) -
                        t95_tmp * 8.0) -
                       d_t240_tmp * 8.0) -
                      t55_tmp * t6 * 8.0) +
                     t60_tmp * t29) +
                    t55_tmp * t29) -
                   t127_tmp * 28.0) -
                  c_t239_tmp * 28.0) -
                 t34_tmp * t6 * 16.0) +
                t34_tmp * t45) +
               t34_tmp * t106) -
              d_t239_tmp * 56.0) +
             e_t239_tmp * 2.0) -
            f_t239_tmp * 2.0) +
           e_t240_tmp * 8.0) *
          -0.5 +
      t125 * t241 * theta2;
  t108 = t18_tmp * t3;
  d_xddot[17] =
      t237 *
          (((((((((((((((((((t11 - t90) + t150) - t96) - t113) + t189) + t192) +
                       t200) +
                      t202) +
                     t204) +
                    t108 * 16.0) +
                   t28_tmp * t36) -
                  t59 * 4.0) -
                 t241_tmp * 22.0) -
                b_t241_tmp * 3.0) -
               t5 * t8 * theta2 * 2.0) +
              t213_tmp * 3.0) +
             t5 * t10 * theta2 * 2.0) -
            t108 * theta2 * 8.0) -
           t28_tmp * t8 * theta2 * 4.0) *
          -0.5 +
      t125 * t95 * theta2;
  d_xddot[18] = 1.0;
  d_xddot[19] = 0.0;
  d_xddot[20] = 0.0;
  d_xddot[21] =
      t237 *
      (((((((((((((((((((t15 + t22) + t30) + t31) - t44) - t24) - t25) - t57) -
                  t38) -
                 t39) +
                t75) +
               t76) -
              t88) +
             t139) +
            t140) -
           t83) +
          t152) +
         t154) -
        t88_tmp * theta2 * 8.0) -
       t57_tmp * theta2 * 8.0) /
      2.0;
  t125 = dot_theta1 * t7;
  t11 = dot_theta2 * t2;
  t108 = t11 * t3;
  d_xddot[22] =
      t237 *
      (((((((((((((((((((((((((((((((dot_theta1 * -448.0 + t61) + t62) - t46) -
                                  t47) +
                                 t85) +
                                t86) +
                               t111) +
                              t114) +
                             t164) +
                            t165) +
                           t171) +
                          t172) +
                         t180) +
                        t181) +
                       t198) +
                      t199) +
                     t220) +
                    t221) -
                   t171_tmp * 336.0) -
                  t125 * 64.0) +
                 t87_tmp * 56.0) +
                t56_tmp * 64.0) -
               t21_tmp * 648.0) +
              t108 * 4.0) +
             t171_tmp * t8 * 46.0) +
            t171_tmp * t10 * 44.0) +
           t125 * t45) +
          t125 * t49) +
         t87_tmp * theta2 * 88.0) +
        t56_tmp * theta2 * 88.0) -
       t108 * theta2 * 2.0) /
      2.0;
  d_xddot[23] =
      t237 *
      (((((((((((((((((((((((-t15 - t22) + t25) - t30) - t31) + t39) + t44) +
                       t57) -
                      t75) -
                     t76) +
                    t84) +
                   t88) +
                  dot_theta2 * t54) +
                 dot_theta2 * t49 * theta2) -
                t139) -
               t140) -
              t152) -
             t154) +
            t24_tmp * 64.0) +
           t11 * 16.0) +
          t24_tmp * t6 * 8.0) +
         t38_tmp * 44.0) -
        t11 * theta2 * 8.0) +
       t83_tmp * 6.0) /
      2.0;
  d_xddot[24] = 0.0;
  d_xddot[25] = 1.0;
  d_xddot[26] = 0.0;
  t125 = ((((-t14 - t21_tmp * 64.0) + t56) + t87) + t110) + t126;
  d_xddot[27] = t237 * t125 * -0.5;
  d_xddot[28] = t237 * (t44 - t83) / 2.0;
  d_xddot[29] = t237 * ((t125 + t44_tmp * 16.0) - t61_tmp * 8.0) / 2.0;
  d_xddot[30] = 0.0;
  d_xddot[31] = 0.0;
  d_xddot[32] = 1.0;
  t125 = ((((((t30 + t31) - t24) - t25) - t38) - t39) + t75) + t76;
  d_xddot[33] = t237 * ((((t125 + t139) + t140) + t152) + t154) / 2.0;
  d_xddot[34] =
      t237 *
      (((((((((((((((((t61 + t62) - t46) - t47) + t85) + t86) + t111) + t114) +
                t164) +
               t165) +
              t171) +
             t172) +
            t180) +
           t181) +
          t198) +
         t199) +
        t220) +
       t221) /
      2.0;
  d_xddot[35] =
      t237 *
      ((((((t125 - t84) + t139) + t140) + t152) + t154) - t83_tmp * 4.0) * -0.5;
}

// End of code generation (doublePendulumDerivative.cpp)
